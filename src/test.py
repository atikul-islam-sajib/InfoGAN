import sys
import os
import logging
import argparse
import torch
import matplotlib.pyplot as plt

sys.path.append("src/")

from config import BEST_MODEL_PATH, OUT_IMAGE
from utils import device_init
from generator import Generator


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filemode="a",
    filename="./logs/trainer.log",
)


class Test:
    """
    A class for loading a pre-trained Generator model and generating images to test the model's performance.

    Parameters:
    | Parameter    | Type    | Description                                   |
    |--------------|---------|-----------------------------------------------|
    | num_samples  | int     | Number of images to generate.                 |
    | latent_space | int     | Size of the latent space for the generator.   |
    | device       | str     | Device to use for generating images ('cpu', 'cuda', etc.). |

    Attributes:
    | Attribute   | Type        | Description                                 |
    |-------------|-------------|---------------------------------------------|
    | device      | torch.device| Device on which to perform computations.    |

    Methods:
    | Method       | Parameters | Description                                             |
    |--------------|------------|---------------------------------------------------------|
    | plot_images  | images     | Plots and saves a grid of generated images.             |
    | test         | None       | Loads the pre-trained generator and generates images.   |

    Method Details:

    - plot_images(images=None):
        Plots and optionally saves a grid of generated images.
        Parameters:
        | Parameter | Type          | Description                               |
        |-----------|---------------|-------------------------------------------|
        | images    | torch.Tensor  | A batch of images to plot.                |
        Raises:
        | Exception | If the output directory does not exist.                    |
        | ValueError| If no images are provided.                                 |

    - test():
        Loads the pre-trained generator model from the specified path, generates a set number of images using random noise as input, and plots the generated images using `plot_images`.
        Raises:
        | ValueError | Captures and logs exceptions related to image plotting.    |
    """

    def __init__(self, num_samples=20, latent_space=100, device="cpu"):
        self.num_samples = num_samples
        self.latent_space = latent_space
        self.device = device_init(device=device)

    def plot_images(self, images=None):
        """
        Plots and saves a grid of generated images to a specified directory.

        Parameters:
        | Parameter | Type                | Description                                      |
        |-----------|---------------------|--------------------------------------------------|
        | images    | Optional[torch.Tensor] | A batch of images generated by the model. If None, raises a ValueError. |

        Raises:
        | Exception   | If the output directory specified in OUT_IMAGE does not exist. |
        | ValueError  | If no images are provided to the method.                      |

        This method arranges the images in a grid and saves them to a file named 'generated_images.png' in the OUT_IMAGE directory. Before saving, it normalizes the images to ensure they are displayed correctly. If the images are None or the output directory doesn't exist, appropriate exceptions are raised.
        """
        if images is not None:
            for index, image in enumerate(images):
                plt.subplot(4, self.num_samples // 4, index + 1)
                image = image.detach().cpu().permute(1, 2, 0)
                image = (image - image.min()) / (image.max() - image.min())
                plt.imshow(image, cmap="gray")

            if os.path.exists(OUT_IMAGE):
                plt.savefig(os.path.join(OUT_IMAGE, "generated_images.png"))
                plt.show()
            else:
                raise Exception("Output directory does not exist".capitalize())
        else:
            raise ValueError("No images provided".capitalize())

    def test(self):
        """
        Loads a pre-trained Generator model and generates a specified number of images.

        This method attempts to load a Generator model's state from a file named 'best_G.pth' located in the BEST_MODEL_PATH directory. It generates noise samples based on the specified latent space size and number of samples, then uses the Generator to create images from these noise samples. Finally, it calls `plot_images` to display and save the generated images.

        Raises:
        | ValueError | If there's an issue with loading the model or generating images, encapsulated within a try-except block to handle exceptions related to image plotting specifically.

        The method ensures that the necessary model and files are present and correctly loaded. It relies on the `plot_images` method to visualize the outcome. If any exceptions occur during plotting, they are caught and logged accordingly.
        """
        if os.path.exists(os.path.join(BEST_MODEL_PATH, "best_G.pth")):
            model_path = os.path.join(BEST_MODEL_PATH, "best_G.pth")

            generator = Generator(latent_space=self.latent_space).to(self.device)
            load_state_dict = torch.load(model_path)
            generator.load_state_dict(load_state_dict)

            noise_samples = torch.randn(self.num_samples, self.latent_space, 1, 1).to(
                self.device
            )

            images = generator(noise_samples)

            try:
                self.plot_images(images)
            except ValueError as e:
                print("Exception caught in the section # {}".format(e))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Test image".title())
    parser.add_argument(
        "--num_samples",
        type=int,
        default=20,
        help="Number of images to generate".capitalize(),
    )
    parser.add_argument(
        "--latent_space",
        type=int,
        default=100,
        help="Size of the latent space".capitalize(),
    )
    parser.add_argument(
        "--device", type=str, default="cuda", help="Device to run on".capitalize()
    )

    parser.add_argument("--test", action="store_true", help="Run the test".capitalize())

    args = parser.parse_args()

    if args.test:
        if args.num_samples and args.latent_space and args.device:
            test = Test(latent_space=args.latent_space, num_samples=args.num_samples)
            test.test()
        else:
            raise ValueError(
                "Please provide both --num_samples and --latent_space".capitalize()
            )
    else:
        raise ValueError("Please use --test".capitalize())
